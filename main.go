package main

import (
	"fmt"
	"log"
	"os"

	"github.com/gofiber/fiber/v2"
	"github.com/gofiber/fiber/v2/middleware/logger"
	"github.com/gofiber/fiber/v2/middleware/session"
	"github.com/joho/godotenv"

	"csbackend/authenticator"
	"csbackend/db"
	g "csbackend/global"
	"csbackend/routes"
	"csbackend/util"

	"github.com/gofiber/swagger" // swagger handler
	"github.com/mattn/go-tty"

	_ "csbackend/docs" // docs is generated by Swag CLI, you have to import it.
)

func main() {
	err := godotenv.Load()
	if err != nil {
		log.Println("Error loading .env file! Skipping...")
	}

	log.Println("Connecting to database...")
	db.Connect()

	doMigration := util.IsFlagPassed("migrate")

	if doMigration {
		log.Println("Migrating database...")
		db.Migrate()
	}

	database, err := db.DB.DB()
	if err != nil {
		panic("failed to connect database")
	}

	defer database.Close()

	auth, err := authenticator.New()
	if err != nil {
		panic("failed to initialize authenticator")
	}

	g.Session = session.New()
	g.DB = db.DB
	g.Authenticator = auth

	app := fiber.New()
	port := util.GetPort()

	routes.SetupRoutes(app)
	app.Get("/swagger/*", swagger.New(swagger.Config{ // custom
		DeepLinking: false,
		// Expand ("list") or Collapse ("none") tag groups by default
		DocExpansion: "none",
		// Prefill OAuth ClientId on Authorize popup
		OAuth: &swagger.OAuthConfig{
			AppName:  "OAuth Provider",
			ClientId: "21bb4edc-05a7-4afc-86f1-2e151e4ba6e2",
		},
		// Ability to change OAuth2 redirect uri location
		OAuth2RedirectUrl: "http://localhost:8080/swagger/oauth2-redirect.html",
	}))

	app.Use(logger.New())

	mode := os.Getenv("GIN_MODE")
	if mode != "release" {
		go check_termination()
	}

	app.Listen(port)
}

func check_termination() {
	tty, err := tty.Open()
	if err != nil {
		log.Fatal(err)
	}
	defer tty.Close()

	for {
		r, err := tty.ReadRune()
		if err != nil {
			log.Fatal(err)
		}

		if r == 'q' {
			fmt.Println("Terminating...")
			os.Exit(0)
			break
		}
	}
}
